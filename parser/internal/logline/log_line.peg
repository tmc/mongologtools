# PE Grammar for MongoDB log lines
#
# Attempts to cover mongo 2.4 -> 3.0 line formats
# 
# The primary aim is to correctly parse queries and ops in a slow query log
#
package logline

type logLineParser Peg {
  logLine
}

MongoLogLine <- Timestamp
                LogLevel?
                Component?
                Context
                Warning?
                Op
                NS
                LineField*
                Locks?
                LineField*
                Duration?
                S? LineField*
                extra? !.

Timestamp <- (timestamp24 / timestamp26) S?

# 3.0 fields
LogLevel <- <[ID]> ' '                      { p.SetField("log_level", buffer[begin:end]) }
Component <- <[A-Z]+> ' '+                  { p.SetField("component", buffer[begin:end]) }

# the mongo context field for the log line
Context <- '[' <letterOrDigit+> ']' ' '     { p.SetField("context", buffer[begin:end]) }

# the op field
Op <- <[[a-z]]+> ' '                        { p.SetField("op", buffer[begin:end]) }


Warning <- <loglineSizeWarning> ' '         { p.SetField("warning", buffer[begin:end]) }

loglineSizeWarning <- 'warning: log line attempted (' [0-9]+ 'k) over max size (' [0-9]+ 'k), printing beginning and end ...'


# a field is a a key value pair in a mongo log line
LineField <- (commandField
            / planSummaryField
            / plainField
            ) S?

NS <- <nsChar*> ' ' { p.SetField("ns", buffer[begin:end]) }
Locks <- 'locks(micros)' S? lock*
lock <- <[[rw]]>                   { p.StartField(buffer[begin:end]) }
        ':' Numeric S?             { p.EndField() }

Duration <- <[0-9]+>'ms'                    { p.SetField("duration_ms", buffer[begin:end]) }


plainField <- <fieldChar+> ':' S? { p.StartField(buffer[begin:end]) }
              LineValue           { p.EndField() }

commandField <- 'command: ' <fieldChar+> S? { p.SetField("command_type", buffer[begin:end]); p.StartField("command") }
                LineValue         { p.EndField() }

planSummaryField <- 'planSummary: ' { p.StartField("planSummary"); p.PushList() }
                    planSummaryElements     { p.EndField()}

planSummaryElements <- planSummaryElem (', ' planSummaryElem)*
planSummaryElem <- <planSummaryStage> { p.PushMap(); p.PushField(buffer[begin:end]) }
                   planSummary

planSummaryStage <- 'AND_HASH' / 'AND_SORTED' / 'CACHED_PLAN' / 'COLLSCAN' / 'COUNT' / 'COUNT_SCAN' / 'DELETE' / 'DISTINCT' / 'EOF' / 'FETCH' / 'GEO_NEAR_2D' / 'GEO_NEAR_2DSPHERE' / 'GROUP' / 'IDHACK' / 'IXSCAN' / 'KEEP_MUTATIONS' / 'LIMIT' / 'SORT_MERGE' / 'MULTI_PLAN' / 'OR' / 'PROJECTION' / 'QUEUED_DATA' / 'SHARDING_FILTER' / 'SKIP' / 'SORT' / 'SUBPLAN' / 'TEXT' / 'UPDATE' # as of 9d0714cd

planSummary <- (' ' LineValue { p.SetMapValue(); p.SetListValue() }
               / { p.PushValue(1); p.SetMapValue(); p.SetListValue() }
               )

LineValue <- (Doc / Numeric) S?

# 2.4 rules
timestamp24 <- <date ' ' time> { p.SetField("timestamp", buffer[begin:end]) }

# 2.6 rules
timestamp26 <- <datetime26> { p.SetField("timestamp", buffer[begin:end]) }
datetime26 <- digit4 [-] digit2 [-] digit2 [T] time tz?


# helper rules
digit4 <- [0-9][0-9][0-9][0-9]
digit2 <- [0-9][0-9]
date <- day ' ' month ' '+ dayNum
tz <- [+] [0-9]+
time <- hour ':' minute ':' second '.' millisecond
day <- [A-Z][a-z][a-z]
month <- [A-Z][a-z][a-z]
dayNum <- [0-9][0-9]?
hour <- digit2 
minute <- digit2
second <- digit2
millisecond <- [0-9][0-9][0-9]

letterOrDigit <- [a-z] / [A-Z] / [0-9] / [_$]
nsChar <- [A-z0-9-.:$]

# this is simply a parser helper to consume any unconsumed line content remaining
extra <- <.+> { p.SetField("xextra", buffer[begin:end]) }

S <- ' '+

########################################################################################
# this is a literal import from github.com/tmc/mongologtools/internal/logdoc/log_doc.peg
########################################################################################
Doc <- '{'                           { p.PushMap() }   
       DocElements?
       '}'                           { p.PopMap() } 

DocElements <- DocElem (',' DocElem)*
DocElem <- S? Field S? Value S?      { p.SetMapValue() }

List <- '['                          { p.PushList() }   
        ListElements?
        ']'                          { p.PopList() }
ListElements <- ListElem (',' ListElem)*
ListElem <- S? Value S?              { p.SetListValue() }

Field <- <fieldChar+> ':'            { p.PushField(buffer[begin:end]) }
Value <- (Doc
        / List
        / Numeric
        / Boolean
        / String
        / Null
        / ObjectID
        / Date
        / BinData
        / TimestampVal
        / Regex
        / NumberLong
        / Undefined
        / MinKey
        / MaxKey
        )

Numeric <- <'-'? [0-9]+ '.'? [0-9]*> { p.PushValue(p.Numeric(buffer[begin:end])) }
Boolean <- True / False
String <- ["] <stringChar*> ["]      { p.PushValue(buffer[begin:end]) }
Null <- 'null'                       { p.PushValue(nil) }
True <- 'true'                       { p.PushValue(true) }
False <- 'false'                     { p.PushValue(false) }
Date <- 'new '? 'Date(' '-'? <[0-9]+> ')' { p.PushValue(p.Date(buffer[begin:end])) }
ObjectID <- 'ObjectId(' ['"]
            <hexChar*>
            ['"] ')'                 { p.PushValue(p.ObjectId(buffer[begin:end])) }
BinData <- 'BinData(' <[^)]+> ')'    { p.PushValue(p.Bindata(buffer[begin:end])) }
Regex <- '/' <regexBody>             { p.PushValue(p.Regex(buffer[begin:end])) }
TimestampVal <-  (timestampParen
                / timestampPipe)
timestampParen <- 'Timestamp(' <[^)]+> ')' { p.PushValue(p.Timestamp(buffer[begin:end])) }
timestampPipe <- 'Timestamp ' <([0-9] / '|')+>      { p.PushValue(p.Timestamp(buffer[begin:end])) }
NumberLong <- 'NumberLong(' <[^)]+> ')' { p.PushValue(p.Numberlong(buffer[begin:end])) }
MinKey <- 'MinKey'                   { p.PushValue(p.Minkey()) }
MaxKey <- 'MaxKey'                   { p.PushValue(p.Maxkey()) }
Undefined <- 'undefined'             { p.PushValue(p.Undefined()) }

hexChar <- [0-9] / [[a-f]]
regexChar <- [^/]
regexBody <- regexChar+ '/' [gims]*
stringChar <- [^"\\] / '\\' .
fieldChar <- [[a-z]] / [0-9] / [_$.*]
########################################################################################
# end imported section
########################################################################################

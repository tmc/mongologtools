# PE Grammer for the custom log line representation MongoDB uses for its log lines
package logdoc

type LogDocParser Peg {
    LogDoc
}

LogDoc <- Doc !.

Doc <- '{'                           { p.PushMap() }   
       DocElements?
       '}'                           { p.PopMap() } 

DocElements <- DocElem (',' DocElem)*
DocElem <- S? Field S? Value S?      { p.SetMapValue() }

List <- '['                          { p.PushList() }   
        ListElements?
        ']'                          { p.PopList() }
ListElements <- ListElem (',' ListElem)*
ListElem <- S? Value S?                 { p.SetListValue() }

Field <- <fieldChar+> ':'            { p.PushField(buffer[begin:end]) }
Value <- (Doc
        / List
        / Numeric
        / Boolean
        / String
        / Null
        / ObjectID
        / Date
        / BinData
        / TimestampVal
        / Regex
        / NumberLong
        / Undefined
        / MinKey
        / MaxKey
        )

Numeric <- <'-'? [0-9]+ '.'? [0-9]*>      { p.PushValue(p.Numeric(buffer[begin:end])) }
Boolean <- True / False
String <- ["] <stringChar*> ["]      { p.PushValue(buffer[begin:end]) }
Null <- 'null'                       { p.PushValue(nil) }
True <- 'true'                       { p.PushValue(true) }
False <- 'false'                     { p.PushValue(false) }
Date <- 'new '? 'Date(' '-'? <[0-9]+> ')' { p.PushValue(p.Date(buffer[begin:end])) }
ObjectID <- 'ObjectId(' ['"]
            <hexChar*>
            ['"] ')'                 { p.PushValue(p.ObjectId(buffer[begin:end])) }
BinData <- 'BinData(' <[^)]+> ')'    { p.PushValue(p.Bindata(buffer[begin:end])) }
Regex <- '/' <regexBody>             { p.PushValue(p.Regex(buffer[begin:end])) }
TimestampVal <-  (timestampParen
                / timestampPipe)
timestampParen <- 'Timestamp(' <[^)]+> ')' { p.PushValue(p.Timestamp(buffer[begin:end])) }
timestampPipe <- 'Timestamp ' <([0-9] / '|')+>  { p.PushValue(p.Timestamp(buffer[begin:end])) }
NumberLong <- 'NumberLong(' <[^)]+> ')' { p.PushValue(p.Numberlong(buffer[begin:end])) }
MinKey <- 'MinKey'                   { p.PushValue(p.Minkey()) }
MaxKey <- 'MaxKey'                   { p.PushValue(p.Maxkey()) }
Undefined <- 'undefined'             { p.PushValue(p.Undefined()) }

hexChar <- [0-9] / [[a-f]]
regexChar <- [^/]
regexBody <- regexChar+ '/' [gims]*
stringChar <- [^"\\] / '\\' ["\\]
fieldChar <- [[a-z]] / [0-9] / [_$.*]

S <- ' '
